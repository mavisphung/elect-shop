openapi: 3.1.0
info:
  title: Electronic Shop API
  description: |
    A simple e-commerce API for electronic products with JWT-based authentication.
    
    ## Authentication
    This API uses JWT (JSON Web Tokens) for authentication. To access protected endpoints:
    1. First, obtain a JWT token by calling the `/api/auth/login` endpoint with valid credentials
    2. Include the token in the `Authorization` header as `Bearer <token>` for subsequent requests
    
    ## Default Users
    For testing purposes, the following users are available:
    - **Admin**: `admin@shop.com` / `admin123` (ADMIN role)
    - **User**: `user@shop.com` / `user123` (USER role)
  version: 1.0.0
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  contact:
    name: Electronic Shop API Support
    email: support@electronicshop.com

servers:
  - url: http://dev.electronicshop.com:8888
    description: Development server
  - url: https://api.electronicshop.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization operations
  - name: Health
    description: Health check endpoints

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      security: []
      description: |
        Authenticate a user with email and password credentials.
        Returns a JWT access token that can be used for subsequent API calls.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              admin_login:
                summary: Admin user login
                value:
                  email: admin@shop.com
                  password: admin123
              regular_user_login:
                summary: Regular user login
                value:
                  email: user@shop.com
                  password: user123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                successful_login:
                  summary: Successful login response
                  value:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbkBzaG9wLmNvbSIsImlhdCI6MTYzOTU4MjQwMCwiZXhwIjoxNjM5NjY4ODAwfQ.example
                    username: admin@shop.com
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid login credentials
                  value:
                    error: Invalid credentials
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /auth/check:
    get:
      tags:
        - Authentication
      summary: Check authentication status
      description: |
        Verify if the current JWT token is valid and the user is authenticated.
        This endpoint requires a valid JWT token in the Authorization header.
      operationId: checkAuth
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Authentication successful - user is authenticated
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_token:
                  summary: Missing authorization token
                  value:
                    error: Access token is missing or invalid
                expired_token:
                  summary: Expired token
                  value:
                    error: Token has expired
        '403':
          description: Forbidden - valid token but insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /healthcheck:
    get:
      tags:
        - Health
      summary: Health check
      description: Simple health check endpoint to verify if the service is running
      operationId: healthCheck
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                healthy:
                  summary: Healthy service response
                  value:
                    status: UP
                    timestamp: 2024-01-15T10:30:00Z
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                service_down:
                  summary: Service is down
                  value:
                    error: Service temporarily unavailable

  /admin/products:
    get:
      tags:
        - Admin
      summary: Get all products
      description: Retrieve a list of all products in the system.
      operationId: getAllProducts
      security:
        - BearerAuth: []
      parameters: 
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/SearchText'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListDto'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_token:
                  summary: Missing authorization token
                  value:
                    error: Access token is missing or invalid
                expired_token:
                  summary: Expired token
                  value:
                    error: Token has expired
        '403':
          description: Forbidden - valid token but insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Internal server error"
    post:
      operationId: createNewProduct
      tags: 
        - Admin
      security: 
        - BearerAuth: []
      summary: Create a new product
      description: |
        Create a new product in the system. Requires ADMIN role.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpsertDto'
      responses:
        '201':
          description: Product created successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '50x':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Internal server error"
  /admin/products/{id}:
    put:
      operationId: updateProduct
      security: 
        - BearerAuth: []
      tags: 
        - Admin
      summary: Update an existing product
      description: |
        Update an existing product by its ID. Requires ADMIN role.
      parameters: 
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpsertDto'
      responses: 
        '200':
          description: Product updated successfully
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Invalid product data"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Not found"
        '50x':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Internal server error"
    delete:
      operationId: deleteProduct
      security: 
        - BearerAuth: []
      tags: 
        - Admin
      summary: Delete a product
      description: |
        Delete a product by its ID. Requires ADMIN role.
      parameters: 
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Product deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Not found"
        '50x':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Internal server error"
      
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token authentication. 
        
        Obtain a token by calling the `/api/auth/login` endpoint.
        Include the token in requests as: `Authorization: Bearer <token>`

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: admin@shop.com
          minLength: 5
          maxLength: 100
        password:
          type: string
          format: password
          description: User's password
          example: admin123
          minLength: 6
          maxLength: 50
      description: Login credentials

    LoginResponse:
      type: object
      required:
        - token
        - username
      properties:
        token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbkBzaG9wLmNvbSIsImlhdCI6MTYzOTU4MjQwMCwiZXhwIjoxNjM5NjY4ODAwfQ.example
        username:
          type: string
          description: Authenticated user's username
          example: admin@shop.com
      description: Successful login response containing JWT token and user info

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
          example: Invalid credentials
      description: Standard error response

    ValidationErrorResponse:
      type: object
      required:
        - error
        - details
      properties:
        error:
          type: string
          description: General error message
          example: Validation failed
        details:
          type: array
          description: Detailed validation errors
          items:
            type: object
            properties:
              field:
                type: string
                description: Field that failed validation
                example: email
              message:
                type: string
                description: Validation error message
                example: must be a valid email address
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: 2024-01-15T10:30:00Z
      description: Validation error response with field-specific details

    HealthResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          description: Service health status
          example: UP
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp
          example: 2024-01-15T10:30:00Z
      description: Health check response
    
    ProductListDto:
      allOf: 
        - $ref: '#/components/schemas/PaginationProperties'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/ProductItemDto'
    
    ProductItemDto:
      type: object
      required:
        - id
        - name
        - stock
        - unitPrice
      properties:
        id:
          type: string
          description: Unique identifier for the product
          example: 12345
        name:
          type: string
          description: Name of the product
          example: Smart TV 55"
        stock:
          type: integer
          description: Available stock quantity
          example: 50
        unitPrice:
          type: number
          format: double
          description: Price per unit of the product
          example: 499.99
    
    PaginationProperties:
      type: object
      required:
        - page
        - size
        - total
      properties:
        page:
          type: integer
          description: Current page number
          default: 1
          example: 1
        size:
          type: integer
          description: Number of items per page
          default: 10
          example: 10
        total:
          type: integer
          description: Total number of items available
          example: 100
    
    ProductUpsertDto:
      type: object
      required:
        - name
        - stock
        - unitPrice
      properties:
        name:
          type: string
          description: Name of the product
          example: Smart TV 55"
        stock:
          type: integer
          description: Available stock quantity
          minimum: 1
          example: 50
        unitPrice:
          type: number
          format: double
          minimum: 1
          description: Price per unit of the product
          example: 499.99
  parameters:
    Page:
      name: page
      in: query
      description: Page number to retrieve
      required: false
      schema:
        type: integer
        default: 1
    Size:
      name: size
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 10
    SearchText:
      name: searchText
      in: query
      description: Search term to filter products by name
      required: false
      schema:
        type: string
    Id:
      name: id
      in: path
      description: Unique identifier of the resource
      required: true
      schema:
        type: string
