/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package me.huypc.elect_shop.generated.api;

import me.huypc.elect_shop.generated.dto.ErrorResponse;
import me.huypc.elect_shop.generated.dto.ProductListDto;
import me.huypc.elect_shop.generated.dto.ProductUpsertDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Admin", description = "the Admin API")
public interface AdminApi {

    /**
     * POST /admin/products : Create a new product
     * Create a new product in the system. Requires ADMIN role. 
     *
     * @param productUpsertDto  (required)
     * @return Product created successfully (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Internal server error (status code 50x)
     */
    @Operation(
        operationId = "createNewProduct",
        summary = "Create a new product",
        description = "Create a new product in the system. Requires ADMIN role. ",
        tags = { "Admin" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Product created successfully"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "50x", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/admin/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createNewProduct(
        @Parameter(name = "ProductUpsertDto", description = "", required = true) @Valid @RequestBody ProductUpsertDto productUpsertDto
    );


    /**
     * DELETE /admin/products/{id} : Delete a product
     * Delete a product by its ID. Requires ADMIN role. 
     *
     * @param id Unique identifier of the resource (required)
     * @return Product deleted successfully (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Product not found (status code 404)
     *         or Internal server error (status code 50x)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Delete a product",
        description = "Delete a product by its ID. Requires ADMIN role. ",
        tags = { "Admin" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Product deleted successfully"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Product not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "50x", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/admin/products/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteProduct(
        @Parameter(name = "id", description = "Unique identifier of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /admin/products : Get all products
     * Retrieve a list of all products in the system.
     *
     * @param page Page number to retrieve (optional, default to 1)
     * @param size Number of items per page (optional, default to 10)
     * @param searchText Search term to filter products by name (optional)
     * @return Successful response (status code 200)
     *         or Unauthorized - invalid or missing token (status code 401)
     *         or Forbidden - valid token but insufficient permissions (status code 403)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getAllProducts",
        summary = "Get all products",
        description = "Retrieve a list of all products in the system.",
        tags = { "Admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductListDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized - invalid or missing token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class), examples = {
                    @ExampleObject(
                        name = "",
                        value = "{\"error\":\"Access token is missing or invalid\"}"
                    ),
                    @ExampleObject(
                        name = "",
                        value = "{\"error\":\"Token has expired\"}"
                    )
                })

            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - valid token but insufficient permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/admin/products",
        produces = { "application/json" }
    )
    
    ResponseEntity<ProductListDto> getAllProducts(
        @Parameter(name = "page", description = "Page number to retrieve", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Parameter(name = "size", description = "Number of items per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
        @Parameter(name = "searchText", description = "Search term to filter products by name", in = ParameterIn.QUERY) @Valid @RequestParam(value = "searchText", required = false) @Nullable String searchText
    );


    /**
     * PUT /admin/products/{id} : Update an existing product
     * Update an existing product by its ID. Requires ADMIN role. 
     *
     * @param id Unique identifier of the resource (required)
     * @param productUpsertDto  (required)
     * @return Product updated successfully (status code 200)
     *         or Bad request - invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Product not found (status code 404)
     *         or Internal server error (status code 50x)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update an existing product",
        description = "Update an existing product by its ID. Requires ADMIN role. ",
        tags = { "Admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product updated successfully"),
            @ApiResponse(responseCode = "400", description = "Bad request - invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Product not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "50x", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/admin/products/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateProduct(
        @Parameter(name = "id", description = "Unique identifier of the resource", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ProductUpsertDto", description = "", required = true) @Valid @RequestBody ProductUpsertDto productUpsertDto
    );

}
