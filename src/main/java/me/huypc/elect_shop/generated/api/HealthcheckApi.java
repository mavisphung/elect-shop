/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package me.huypc.elect_shop.generated.api;

import me.huypc.elect_shop.generated.dto.ErrorResponse;
import me.huypc.elect_shop.generated.dto.HealthResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Health", description = "Health check endpoints")
public interface HealthcheckApi {

    /**
     * GET /healthcheck : Health check
     * Simple health check endpoint to verify if the service is running
     *
     * @return Service is healthy (status code 200)
     *         or Service unavailable (status code 503)
     */
    @Operation(
        operationId = "healthCheck",
        summary = "Health check",
        description = "Simple health check endpoint to verify if the service is running",
        tags = { "Health" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Service is healthy", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthResponse.class), examples = {
                    @ExampleObject(
                        name = "",
                        value = "{\"status\":\"UP\",\"timestamp\":\"2024-01-15T10:30:00Z\"}"
                    )
                })

            }),
            @ApiResponse(responseCode = "503", description = "Service unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class), examples = {
                    @ExampleObject(
                        name = "",
                        value = "{\"error\":\"Service temporarily unavailable\"}"
                    )
                })

            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/healthcheck",
        produces = { "application/json" }
    )
    
    ResponseEntity<HealthResponse> healthCheck(
        
    );

}
