/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package me.huypc.elect_shop.generated.api;

import me.huypc.elect_shop.generated.dto.CartItemUpsertForm;
import me.huypc.elect_shop.generated.dto.ErrorResponse;
import me.huypc.elect_shop.generated.dto.OrderPlaceForm;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    /**
     * POST /user/cart/add : Add item to the current user cart
     * Add a product to the current user&#39;s shopping cart (basket).
     *
     * @param cartItemUpsertForm  (required)
     * @return Successful response (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Cart not found (status code 404)
     *         or Internal server error (status code 50x)
     */
    @Operation(
        operationId = "addToUserCart",
        summary = "Add item to the current user cart",
        description = "Add a product to the current user's shopping cart (basket).",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Cart not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "50x", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/cart/add",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> addToUserCart(
        @Parameter(name = "CartItemUpsertForm", description = "", required = true) @Valid @RequestBody CartItemUpsertForm cartItemUpsertForm
    );


    /**
     * POST /user/orders/place : Place an order for the current user
     * Place an order for the current user based on the items in their shopping cart (basket).
     *
     * @param orderPlaceForm  (required)
     * @return Successful response (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Cart not found (status code 404)
     *         or Internal server error (status code 50x)
     */
    @Operation(
        operationId = "placeUserOrder",
        summary = "Place an order for the current user",
        description = "Place an order for the current user based on the items in their shopping cart (basket).",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Cart not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "50x", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/orders/place",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> placeUserOrder(
        @Parameter(name = "OrderPlaceForm", description = "", required = true) @Valid @RequestBody OrderPlaceForm orderPlaceForm
    );


    /**
     * POST /user/cart/remove : Remove item from the current user cart
     * Remove a product from the current user&#39;s shopping cart (basket).
     *
     * @param cartItemUpsertForm  (required)
     * @return Successful response (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Cart not found (status code 404)
     *         or Internal server error (status code 50x)
     */
    @Operation(
        operationId = "removeFromUserCart",
        summary = "Remove item from the current user cart",
        description = "Remove a product from the current user's shopping cart (basket).",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Cart not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "50x", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/cart/remove",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> removeFromUserCart(
        @Parameter(name = "CartItemUpsertForm", description = "", required = true) @Valid @RequestBody CartItemUpsertForm cartItemUpsertForm
    );

}
