/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package me.huypc.elect_shop.generated.api;

import me.huypc.elect_shop.generated.dto.ErrorResponse;
import me.huypc.elect_shop.generated.dto.LoginRequest;
import me.huypc.elect_shop.generated.dto.LoginResponse;
import me.huypc.elect_shop.generated.dto.ValidationErrorResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Authentication", description = "User authentication and authorization operations")
public interface AuthApi {

    /**
     * GET /auth/check : Check authentication status
     * Verify if the current JWT token is valid and the user is authenticated. This endpoint requires a valid JWT token in the Authorization header. 
     *
     * @return Authentication successful - user is authenticated (status code 204)
     *         or Unauthorized - invalid or missing token (status code 401)
     *         or Forbidden - valid token but insufficient permissions (status code 403)
     */
    @Operation(
        operationId = "checkAuth",
        summary = "Check authentication status",
        description = "Verify if the current JWT token is valid and the user is authenticated. This endpoint requires a valid JWT token in the Authorization header. ",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Authentication successful - user is authenticated"),
            @ApiResponse(responseCode = "401", description = "Unauthorized - invalid or missing token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class), examples = {
                    @ExampleObject(
                        name = "",
                        value = "{\"error\":\"Access token is missing or invalid\"}"
                    ),
                    @ExampleObject(
                        name = "",
                        value = "{\"error\":\"Token has expired\"}"
                    )
                })

            }),
            @ApiResponse(responseCode = "403", description = "Forbidden - valid token but insufficient permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth/check",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> checkAuth(
        
    );


    /**
     * POST /auth/login : User login
     * Authenticate a user with email and password credentials. Returns a JWT access token that can be used for subsequent API calls. 
     *
     * @param loginRequest  (required)
     * @return Login successful (status code 200)
     *         or Invalid credentials (status code 400)
     *         or Validation error (status code 422)
     */
    @Operation(
        operationId = "loginUser",
        summary = "User login",
        description = "Authenticate a user with email and password credentials. Returns a JWT access token that can be used for subsequent API calls. ",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Login successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginResponse.class), examples = {
                    @ExampleObject(
                        name = "",
                        value = "{\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbkBzaG9wLmNvbSIsImlhdCI6MTYzOTU4MjQwMCwiZXhwIjoxNjM5NjY4ODAwfQ.example\",\"username\":\"admin@shop.com\"}"
                    )
                })

            }),
            @ApiResponse(responseCode = "400", description = "Invalid credentials", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class), examples = {
                    @ExampleObject(
                        name = "",
                        value = "{\"error\":\"Invalid credentials\"}"
                    )
                })

            }),
            @ApiResponse(responseCode = "422", description = "Validation error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<LoginResponse> loginUser(
        @Parameter(name = "LoginRequest", description = "", required = true) @Valid @RequestBody LoginRequest loginRequest
    );

}
